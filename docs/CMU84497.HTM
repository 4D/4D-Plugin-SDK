<!DOCTYPE html>
<html>
 <head>
  <title>
   PA_SetAreaReference
  </title>
  <link href="favicon.gif" rel="icon" type="image/gif"/>
 </head>
 <body bgcolor="#FAFAFA" link="#008108" vlink="#008108">
  <p>
   <h2>
    PA_SetAreaReference
   </h2>
  </p>
<table>
 <tr>
  <td>
   <a href="http://www.4d.com">
    <img src="menu/4D.GIF" type="image/gif"/>
   </a>
  </td>
  <td>
   <a href="index.html">
    <img src="menu/THM.png" type="image/png"/>
   </a>
  </td>
  <td>
   <a href="XKALPUSA.HTM">
    <img src="menu/ALPHA.png" type="image/png"/>
   </a>
  </td>
 </tr>
</table>
<hr/>
  <p>
   version 2003
  </p>
  <hr/>
  <p>
   PA_SetAreaReference (params; ref)
  </p>
  <p>
   <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      <b>
       Parameter
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      <b>
       Type
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      <b>
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      <b>
       Description
      </b>
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      params
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      PA_PluginParameters
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      →
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      Parameters received in PluginMain
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      ref
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      void*
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      →
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      Handle/Pointer to private data
     </td>
    </tr>
   </table>
  </p>
  <b>
   <p>
    Description
   </p>
  </b>
  <p>
   The routine
   <code>
    <font color="#CF0000">
     PA_SetAreaReference
    </font>
   </code>
   sets the area reference to
   <code>
    ref
   </code>
   .
   <code>
    ref
   </code>
   is a pointer to any kind of  private data needed by the area. Each time the area is called, it can get its private data by calling
   <code>
    <a href="CMU84496.HTM">
     PA_GetAreaReference
    </a>
   </code>
   .
  </p>
  <p>
   This is especially useful when more that one area exists at Runtime (ie., when several processes use 4D Write). In this case it would be more difficult for the plug-in to retrieve the specific data attached to a particular area. This could be done by using a global reference system (such as an array or anything else), but using
   <code>
    PA_Set/PA_GetAreaReference
   </code>
   is far easier.
  </p>
  <p>
   You can change the area reference to your private data at any time, it does not depend on a particular event, but it usually is called at initialization time. When the data points to data in the heap, be sure to disposing it before allocating a new one.
  </p>
  <b>
   <p>
    Example
   </p>
  </b>
  <p>
   Initialize data and retrieve it. Once 10 mouse clicks occur, an alert is displayed.
  </p>
  <p>
  </p>
  <pre><code>   typedef struct {
      long   aField;
      short   anotherField;
      /* . . . */
      short   mouseClickCount;
   } AREA, *LPAREA;
 
   void PluginMain(selector, PA_PluginParameters params)
   {
      switch (selector)
      {
      /* . . . usual dispatch of the selector . . . */
         case kAREA:
            DoArea(params);
            break;
      }
   }
 
   void DoArea (PA_PluginParameters params)
   {
      AE_Event   event = PA_GetAreaEvent(params);
      LPAREA      privateData;
      
      switch(event)
      {
         case eAE_Init:
      // initialize our private data
            privateData = malloc( sizeof(AREA) );
            if(privateData)
            {
               privateData-&gt;aField = GetTickCount();
               /* . . . */
               privateData-&gt;mouseClickCount = 0;
         // Once initialized, "save" it in the area
               PA_SetAreaReference(params, privateData);
            }
            break;
         
         case eAE_Deinit;
      // Get back our private data...
            params = (LPAREA) PA_GetAreaReference(params);
            if(params)
            {
         // ... and release it
               free(params);
            }
            break;
 
   /* other events, get the reference and use it */
         case eAE_Mouse down:
            params = (LPAREA) PA_GetAreaReference(params);
            if(params)
            {
               if( (++(params-&gt;mouseClickCount)) &gt; 10 )
               {
                  PA_Alert("10 clicks occurred");
                  params-&gt;mouseClickCount = 0;
               }
            }
            break;
      }
   }
</code></pre>
  <b>
   <p>
    See Also
   </p>
  </b>
  <p>
   <a href="CMU84478.HTM">
    Create and use an external area
   </a>
   ,
   <a href="CMU84496.HTM">
    PA_GetAreaReference
   </a>
   .
  </p>
  <b>
   <p>
    Error Handling
   </p>
  </b>
  <code>
   <p>
    <a href="CMU84896.HTM">
     PA_GetLastError
    </a>
   </p>
  </code>
  keeps the last error that occurred
  <u>
   before
  </u>
  calling the routine.
 </body>
</html>
