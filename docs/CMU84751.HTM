<!DOCTYPE html>
<html>
 <head>
  <title>
   PA_NewProcess
  </title>
  <link href="favicon.gif" rel="icon" type="image/gif"/>
 </head>
 <body bgcolor="#FAFAFA" link="#008108" vlink="#008108">
  <p>
   <h2>
    PA_NewProcess
   </h2>
  </p>
<table>
 <tr>
  <td>
   <a href="http://www.4d.com">
    <img src="menu/4D.GIF" type="image/gif"/>
   </a>
  </td>
  <td>
   <a href="index.html">
    <img src="menu/THM.png" type="image/png"/>
   </a>
  </td>
  <td>
   <a href="XKALPUSA.HTM">
    <img src="menu/ALPHA.png" type="image/png"/>
   </a>
  </td>
 </tr>
</table>
<hr/>
  <p>
   version 2003
  </p>
  <hr/>
  <p>
   PA_NewProcess (procPtr; stackSize; pName) → long
  </p>
  <p>
   <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      <b>
       Parameter
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      <b>
       Type
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      <b>
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      <b>
       Description
      </b>
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      procPtr
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      void *
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      →
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      External process code
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      stackSize
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      long
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      →
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      Process stack size
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      pName
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      char *
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      →
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      Process name
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      Function result
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      long
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      ←
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      Launched process number
     </td>
    </tr>
   </table>
  </p>
  <b>
   <p>
    Description
   </p>
  </b>
  <p>
   The routine
   <code>
    <font color="#CF0000">
     PA_NewProcess
    </font>
   </code>
   creates a new process  and runs the code referenced by
   <code>
    procPtr
   </code>
   (a project routine). The process will have the stack size
   <code>
    stackSize
   </code>
   and the name
   <code>
    pName
   </code>
   (usual convention applies: if the name starts with "$", the process is local).
  </p>
  <u>
   <p>
    procPtr parameter
   </p>
  </u>
  <p>
   This is the name of the plug-in routine that runs the external process. It has no parameters and returns no value and is declared as :
  </p>
  <p>
   <pre><code>void MyExternalProcess (void);</code></pre>
   <p>
    See below for more details on this routine.
   </p>
   <u>
    <p>
     stackSize parameter
    </p>
   </u>
   <p>
    Pass the stack size (expressed in bytes) that 4D should allocate for the process. A minimum of 16K is advised, 32K is average. A larger stack size may be necessary depending upon the nature of the external process.
   </p>
   <b>
    <p>
     NOTE
    </p>
   </b>
   :
  </p>
  <p>
   The 4D Plug-in can optionally use a negative stack size.
  </p>
  <p>
   If so, it indicates to 4th Dimension that the process cannot be aborted by using the 4th Dimension Abort command from the Process menu in the Design environment.
  </p>
  <u>
   <p>
    pName parameter
   </p>
  </u>
  <p>
   Pass the name of the process in
   <code>
    pName
   </code>
   (C or Pascal string, depending on default settings or previous calls to
   <code>
    <a href="CMU84817.HTM">
     PA_UsePStrings
    </a>
   </code>
   or
   <code>
    <a href="CMU84816.HTM">
     PA_UseCStrings
    </a>
   </code>
   ).
  </p>
  <u>
   <p>
    Returned value
   </p>
  </u>
  <p>
   If the external process is successfully started, its process number is returned. If the process could not be started 0 (zero) is returned and the appropriate error code (e.g.
   <code>
    eER_NotEnoughMemory
   </code>
   ) is returned in
   <code>
    <a href="CMU84896.HTM">
     PA_GetLastError
    </a>
   </code>
   .
  </p>
  <u>
   <p>
    The external process code
   </p>
  </u>
  <p>
   While writing an external process, the following actions MUST be performed:
  </p>
  <p>
   · The entry point routine of the process code has no parameters.
  </p>
  <p>
   · At the very beginning of the code,
   <code>
    <a href="CMU84754.HTM">
     PA_YieldAbsolute
    </a>
   </code>
   MUST be called. This allows the 4D scheduler to correctly handle the addition of the external process to its internal process table.
  </p>
  <p>
   · If, as it should be, the external process includes a waiting loop :
  </p>
  <p>
   <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
     <td align="LEFT" valign="TOP" width="22%">
     </td>
     <td align="LEFT" valign="TOP" width="78%">
      <font face="Geneva,Arial" size="2">
       
      </font>
      it must call
      <code>
       PA_WaitNextEvent
      </code>
      to get the current event returned (such as
      <code>
       mouseDown
      </code>
      ). Under Macintosh, it can instead use
      <code>
       GetNextEvent
      </code>
      , but for multi-platform purpose it is recommended to use
      <code>
       PA_WaitNextEvent
      </code>
      .
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="22%">
     </td>
     <td align="LEFT" valign="TOP" width="78%">
      <font face="Geneva,Arial" size="2">
       
      </font>
      it must call
      <code>
       PA_IsProcessDying
      </code>
      to see if the user or 4th Dimension wants the process to abort. If
      <code>
       PA_IsProcessDying
      </code>
      returns 1, the external process must exit the event loop as soon as possible call
      <code>
       PA_KillProcess
      </code>
      .
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="22%">
      Executing external processes receives  1 in
      <code>
       PA_IsProcessDying
      </code>
      when:
     </td>
     <td align="LEFT" valign="TOP" width="78%">
     </td>
    </tr>
   </table>
  </p>
  <p>
   · The user chooses
   <b>
    Quit
   </b>
   ,
   <b>
    New Database
   </b>
   , or
   <b>
    Open Database
   </b>
   from the 4D
   <b>
    File
   </b>
   menu
  </p>
  <p>
   · The 4D command
   <code>
    QUIT
   </code>
   4D is called,
  </p>
  <p>
   · The routine
   <code>
    PA_Quit
   </code>
   is called.
  </p>
  <p>
   · The user chooses
   <b>
    Abort
   </b>
   in the Runtime Explorer
  </p>
  <p>
   The 4D scheduler takes control and tells the external processes it must terminate. It waits for a predetermined period of time and then authoritatively aborts any remaining executing processes . It is at this point that 4D will call the
   <code>
    kDeInitPackage
   </code>
   or
   <code>
    kServerDeInitPackage
   </code>
   phase of the 4D plug-in packages.
  </p>
  <p>
   · Calling
   <code>
    <a href="CMU84761.HTM">
     PA_KillProcess
    </a>
   </code>
   MUST be the last action performed by an external process which is terminating. This assures that the 4D scheduler is notified of the termination and updates its internal process table according.
  </p>
  <p>
   · The 4D plug-in should NOT call any API's routine that would trigger the execution of a 4D command that displays a 4D Form from within the external process, such as
   <code>
    ADD RECORD, DISPLAY RECORD, DISPLAY SELECTION, MODIFY SELECTION
   </code>
   and
   <code>
    <a href="CMU00040.HTM">
     DIALOG
    </a>
   </code>
   . Executing one of these 4th Dimension commands from within the external process will lead to a System Error.
  </p>
  <p>
   · If the 4D plug-in external process has user interface components it may open as many windows as is required. These windows belong to the 4D plug-in's external process and form the external processes' window list. For the cases where user interfaces components are required it is the responsibility of the 4D plug-in to set up its own menu bars. 4th Dimension automatically inserts the Apple (MacOS) or Help (Windows) menus.
  </p>
  <p>
   The 4D plug-in external process can be made invisible. For example, another process applying the 4D command
   <code>
    <a href="CMU00324.HTM">
     HIDE PROCESS
    </a>
   </code>
   to the 4D plug-in process is valid. In such cases the visible field of the 4D plug-in window records are set to FALSE.
  </p>
  <p>
   Of course, there are some differences between Mac and Windows windows.
  </p>
  <p>
   If the programmer uses Macintosh routines and Altura Mac2Win to run its code under Windows, he can write its code "as usual" : the plug-in creates its windows, and processes them into an event loop.
  </p>
  <p>
   A Windows programmer can create and use windows and their WinProc, as usual, 4th Dimension will give the correct event to winProc of the window that receive it. But remember that, as the windows were created from an external process and belongs to it and not to 4th Dimension, this process must run the event loop that calls
   <code>
    <a href="CMU84461.HTM">
     PA_WaitNextEvent
    </a>
   </code>
   and
   <code>
    <a href="CMU84749.HTM">
     PA_IsProcessDying
    </a>
   </code>
   to keep a "reference" to the code that created the windows. There is no problem in adding a winProc to the window by calling the Windows routine
   <code>
    SetWindowLong
   </code>
   .
  </p>
  <p>
   Under MacOS, most of the Windows Manager routines are patched by 4th Dimension. In order to comply with the 4D multitasking environment the 4D plug-in must use them rather than directly accessing data structures or System Globals. For instance the MacOS toolbox function call FrontWindow will return the front most window WITHIN the 4D plug-in's external process. Meanwhile, the System Global WindowList ($9D6) will contain a pointer to the front most window for the entire 4th Dimension active session.
  </p>
  <p>
   In both cases, the programmer can use
   <code>
    <a href="CMU84514.HTM">
     PA_NewWindow
    </a>
   </code>
   to create the window on both platform and insure that it will be added to the 4th Dimension application windows list.
  </p>
  <b>
   <p>
    Example
   </p>
  </b>
  <p>
   Sample code of an external process.  This is the skeleton of what should be done by every external process :
  </p>
  <p>
   Code of the external process, using Pascal strings in this sample:
  </p>
  <pre><code>void SampleProcess()
{
   char      done = 0;
   PA_Event   event;
 
// tell the scheduler that we exist
   PA_YieldAbsolute();
 
// the main event loop of this external process
   while ( ! done )
   {
   // Should we quit the process ?
      done = PA_IsProcessDying();
   // Is there something for me ?
      if ( ! done &amp;&amp; PA_WaitNextEvent( &amp;event ) )
      {
      // Yes. Dispatch what.
         switch ( event.fWhat )
         {
            /* . . . we could set done to 1 here . . . */
         }
      }
   }
 
   PA_KillProcess();
}</code></pre>
  <p>
   Launch the external process MyExternalProcess with a stack of 32Ko.
  </p>
  <p>
  </p>
  <pre><code>   PA_NewProcess(MyExternalProcess, (32 * 1024), "Plug-in External Process");
 
 
 
</code></pre>
  <p>
   Code of the external process, using Pascal strings in this sample:
  </p>
  <pre><code>void Process(void)
{
#define kTopLefT   50
#define kBottomRight   300
#define kStringX   100
#define kStringY   100
#define kWinMax   32767
   char            index;
   char            done,
               message[63];
   PA_WindowRef      aWindow;
   PA_Rect         bounds;
   PA_Event         event;
 
   PA_YieldAbsolute();
 
   done = (char) 0;
   *message = (char) 0;
   bounds.lefT = bounds.top = kTopLefT;
   bounds.right = bounds.bottom = kBottomRight;
   aWindow = PA_NewWindow(bounds, eWL_Window, docWindow, "\pNew plug-in document", 1);
 
   while(!done)
   {
      if(PA_IsProcessDying())
      {
         DisposeWindow(aWindow);
         done = true;
      }
      else
      {
         PA_WaitNextEvent(&amp;event);
         switch(event.what)
         {
            case kTerminateProcess:
               DisposeWindow(aWindow);
               done = true;
               break;
            case updateEvt:
               HandleUpdateEvent(&amp;event, aWindow, message);
               break;
            case mouseDown:
               HandleMouseDownEvent(&amp;event, aWindow, message);
               break;
         }
      }
   }
   PA_KillProcess();
}
 
</code></pre>
  <b>
   <p>
    See Also
   </p>
  </b>
  <p>
   <a href="CMU84462.HTM">
    External processes
   </a>
   ,
   <a href="CMU84761.HTM">
    PA_KillProcess
   </a>
   ,
   <a href="CMU84754.HTM">
    PA_YieldAbsolute
   </a>
   .
  </p>
  <b>
   <p>
    Error Handling
   </p>
  </b>
  <p>
   Use
   <code>
    <a href="CMU84896.HTM">
     PA_GetLastError
    </a>
   </code>
   to see if an error occurred.
  </p>
 </body>
</html>