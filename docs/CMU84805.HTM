<!DOCTYPE html>
<html>
 <head>
  <title>
   PA_LockHandle
  </title>
  <link href="favicon.gif" rel="icon" type="image/gif"/>
 </head>
 <body bgcolor="#FAFAFA" link="#008108" vlink="#008108">
  <p>
   <h2>
    PA_LockHandle
   </h2>
  </p>
<table>
 <tr>
  <td>
   <a href="http://www.4d.com">
    <img src="menu/4D.GIF" type="image/gif"/>
   </a>
  </td>
  <td>
   <a href="index.html">
    <img src="menu/THM.png" type="image/png"/>
   </a>
  </td>
  <td>
   <a href="XKALPUSA.HTM">
    <img src="menu/ALPHA.png" type="image/png"/>
   </a>
  </td>
 </tr>
</table>
<hr/>
  <p>
   version 2003
  </p>
  <hr/>
  <p>
   PA_LockHandle (handle) → char*
  </p>
  <p>
   <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      <b>
       Parameter
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      <b>
       Type
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      <b>
      </b>
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      <b>
       Description
      </b>
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      handle
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      PA_Handle
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      →
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      The handle to lock
     </td>
    </tr>
    <tr>
     <td align="LEFT" valign="TOP" width="20%">
      Function result
     </td>
     <td align="LEFT" valign="TOP" width="15%">
      char*
     </td>
     <td align="LEFT" valign="TOP" width="5%">
      ←
     </td>
     <td align="LEFT" valign="TOP" width="60%">
      Pointer to the data led to by handle
     </td>
    </tr>
   </table>
  </p>
  <b>
   <p>
    Description
   </p>
  </b>
  <p>
   The routine
   <code>
    <font color="#CF0000">
     PA_LockHandle
    </font>
   </code>
   locks the memory block led to by handle and returns a pointer to it.
  </p>
  <p>
   This is useful if you call system traps that can move memory while using the handle. Remember to unlock the handle once you have completed your task so 4th Dimension can better avoid memory fragmentation.
  </p>
  <b>
   <p>
    NOTE
   </p>
  </b>
  <p>
   This lock is not an incremental lock. If you call
   <code>
    <font color="#CF0000">
     PA_LockHandle
    </font>
   </code>
   10 times on the same handle, one simple call to
   <code>
    <a href="CMU84804.HTM">
     PA_UnlockHandle
    </a>
   </code>
   unlocks the handle.
  </p>
  <p>
   The code is usually built like this :
  </p>
  <pre><code>   pt = PA_LockHandle(aHandle);
      /* . . . code . . . */
   PA_UnlockHandle(aHandle);
</code></pre>
  <b>
   <p>
    Example
   </p>
  </b>
  <p>
   <pre><code>Lock a handle before allocating new block of memory
</code></pre>
   <p>
   </p>
   <pre><code>   typedef struct
   {
      short      fValue;
      PA_Handle   fArray[10];
   } Sample;
   
   /* . . . code . . . */
   
   // mySample has been allocated using PA_NewHandle( sizeof( Sample ) )
   // We allocate memory via PA_NewHandle in a loop that de-references
   // the "parent" handle. We must lock it prior to this.
   Sample* p;
 
   p = (Sample*) PA_LockHandle( mySample );
   for ( i = 0; i &lt; 10; i++ )
   {
      p-&gt;myArray[i] = PA_NewHandle(. . .);
      
      /* . . . code . . . */
   }
   // Time to unlock the handle to prevent memory fragmentation
   PA_Unlock( mySample );
</code></pre>
   <b>
    <p>
     See Also
    </p>
   </b>
   <p>
    <a href="CMU84804.HTM">
     PA_UnlockHandle
    </a>
    .
   </p>
   <b>
    <p>
     Error Handling
    </p>
   </b>
   <p>
    Use
    <code>
     <a href="CMU84896.HTM">
      PA_GetLastError
     </a>
    </code>
    to see if an error occurred.
   </p>
  </p>
 </body>
</html>